"use strict";var ApplicationConfiguration=function(){var applicationModuleName="todogenius",applicationModuleVendorDependencies=["ngResource","ui.router","ui.bootstrap","ui.utils"],registerModule=function(moduleName,dependencies){angular.module(moduleName,dependencies||[]),angular.module(applicationModuleName).requires.push(moduleName)};return{applicationModuleName:applicationModuleName,applicationModuleVendorDependencies:applicationModuleVendorDependencies,registerModule:registerModule}}();angular.module(ApplicationConfiguration.applicationModuleName,ApplicationConfiguration.applicationModuleVendorDependencies),angular.module(ApplicationConfiguration.applicationModuleName).config(["$locationProvider",function($locationProvider){$locationProvider.hashPrefix("!")}]),angular.element(document).ready(function(){"#_=_"===window.location.hash&&(window.location.hash="#!"),angular.bootstrap(document,[ApplicationConfiguration.applicationModuleName])}),ApplicationConfiguration.registerModule("core"),ApplicationConfiguration.registerModule("users"),angular.module("core").config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise("/"),$stateProvider.state("home",{url:"/",templateUrl:"modules/core/views/home.client.view.html"}).state("active",{url:"/active",templateUrl:"modules/core/views/home.client.view.html"}).state("completed",{url:"/completed",templateUrl:"modules/core/views/home.client.view.html"})}]),angular.module("core").controller("HeaderController",["$scope","Authentication","Menus",function($scope,Authentication,Menus){$scope.authentication=Authentication,$scope.isCollapsed=!1,$scope.menu=Menus.getMenu("topbar"),$scope.toggleCollapsibleMenu=function(){$scope.isCollapsed=!$scope.isCollapsed},$scope.$on("$stateChangeSuccess",function(){$scope.isCollapsed=!1})}]),angular.module("core").controller("HomeController",["$scope","$location","$filter","Authentication","TodoStorage",function($scope,$location,$filter,Authentication,TodoStorage){function setTodoMarker(idx){navigator.geolocation&&navigator.geolocation.getCurrentPosition(function(position){var pos=[position.coords.latitude,position.coords.longitude];todos[idx].pos=pos;var latLng=new google.maps.LatLng(pos[0],pos[1]),marker=new google.maps.Marker({position:latLng,map:map,animation:google.maps.Animation.DROP,title:todos[idx].title});todos[idx].markerIdx=idx,markers[idx]=marker,refreshCluster()})}function refreshCluster(){var markersList=[];for(var key in markers)markers[key]&&markersList.push(markers[key]);new MarkerClusterer(map,markersList,{maxZoom:15,gridSize:20})}function handleNoGeolocation(errorFlag){if(errorFlag)var content="Error: The Geolocation service failed.";else var content="Error: Your browser doesn't support geolocation.";{var options={map:map,position:new google.maps.LatLng(60,105),content:content};new google.maps.InfoWindow(options)}map.setCenter(options.position)}$scope.authentication=Authentication,$scope.newTodo="",$scope.editingTodo=null;var todos=$scope.todos=TodoStorage.get(),mapOptions={zoom:15,center:new google.maps.LatLng(37.402,127.107),mapTypeId:google.maps.MapTypeId.ROADMAP},map=new google.maps.Map(document.getElementById("map-canvas"),mapOptions),markers={};$scope.$watch("todos",function(newValue,oldValue){$scope.remainingCount=$filter("filter")(todos,{completed:!1}).length,$scope.completedCount=todos.length-$scope.remainingCount,$scope.allChecked=!$scope.remainingCount,newValue!==oldValue&&TodoStorage.put(todos)},!0),$scope.$on("$stateChangeSuccess",function(){var path=$location.path().split("/"),status=$scope.status=path[path.length-1]||"";$scope.statusFilter="active"===status?{completed:!1}:"completed"===status?{completed:!0}:null}),$scope.addTodo=function(){var newTodo=$scope.newTodo.trim();newTodo.length&&(todos.push({title:newTodo,completed:!1}),setTodoMarker(todos.length-1),$scope.newTodo="")},$scope.editTodo=function(todo){$scope.editingTodo=todo,$scope.originalTodo=angular.extend({},todo)},$scope.removeTodo=function(todo){var idx=todos.indexOf(todo);markers[todo.markerIdx]&&(markers[todo.markerIdx].setMap(null),markers[todo.markerIdx]=null),refreshCluster(),todos.splice(idx,1)},$scope.doneEditing=function(todo){$scope.editingTodo=null,todo.title=todo.title.trim(),todo.title||$scope.removeTodo(todo)},$scope.revertEditing=function(todo){todos[todos.indexOf(todo)]=$scope.originalTodo,$scope.doneEditing($scope.originalTodo)},$scope.clearCompletedTodos=function(){$scope.todos=todos=todos.filter(function(val){return!val.completed})},$scope.markAll=function(completed){todos.forEach(function(todo){todo.completed=!completed})},function(){navigator.geolocation?navigator.geolocation.getCurrentPosition(function(position){var pos=new google.maps.LatLng(position.coords.latitude,position.coords.longitude);map.setCenter(pos)},function(){handleNoGeolocation(!0)}):handleNoGeolocation(!1)}(),function(){for(var length=todos.length,i=0;length>i;i++)if(todos[i].pos){var latLng=new google.maps.LatLng(todos[i].pos[0],todos[i].pos[1]),marker=new google.maps.Marker({position:latLng,map:map,title:todos[i].title});todos[i].markerIdx=i,markers[i]=marker}refreshCluster()}(),$scope.onDrop=function($event,$data){var temp=todos[$data.dragEleIdx];todos[$data.dragEleIdx]=todos[$data.dropEleIdx],todos[$data.dropEleIdx]=temp,console.log($data)}}]),angular.module("core").directive("uiDraggable",["$parse","$rootScope",function($parse,$rootScope){return function(scope,element,attrs){element.attr("draggable",!1),attrs.$observe("uiDraggable",function(){element.attr("draggable",!scope.todo.completed)});var dragData="";scope.$watch(attrs.drag,function(newValue){dragData=newValue});var dummyNode,lastElementOffset,idx=scope.todos.indexOf(scope.todo);element.bind("dragstart",function(e){if(lastElementOffset=63*scope.remainingCount-2,scope.todo.completed)return void e.preventDefault();$rootScope.$broadcast("ANGULAR_DRAG_START",{dragEleIdx:idx}),dummyNode=element[0].cloneNode(!0);var dummycss="position : absolute;top : -58px;width : "+element[0].offsetWidth+"px;pointer-events : none;transform : translate3d(0px,"+(63*(idx+1)+e.offsetY-30)+"px, 0px);";dummyNode.style.cssText=dummycss,dummyNode.classList.add("dragging"),element[0].parentNode.appendChild(dummyNode),element[0].style.opacity=0}),element.bind("dragend",function(){dummyNode.remove(),element[0].style.opacity=1;var sendChannel=attrs.dragChannel||"defaultchannel";$rootScope.$broadcast("ANGULAR_DRAG_END",sendChannel)});var prevOffset;element.bind("drag",function(e){var offsetY=63*(idx+1)+e.offsetY-30;dummyNode.style.transform=offsetY>lastElementOffset?"translate3d(0px,"+lastElementOffset+"px, 0px)":58>offsetY&&58>prevOffset?"translate3d(0px,58px, 0px)":"translate3d(0px,"+offsetY+"px, 0px)",$rootScope.moveup=offsetY>prevOffset?!1:!0,prevOffset=offsetY})}}]).directive("uiOnDrop",["$parse","$rootScope",function($parse,$rootScope){return function(scope,element,attr){function onDragOver(e){return e.preventDefault&&e.preventDefault(),e.stopPropagation&&e.stopPropagation(),e.dataTransfer.dropEffect="move",!1}function onDragEnter(){if(scope.todo)if(console.log($rootScope.moveup),$rootScope.moveup){if(dropEleIdx>dragEleIdx){if(scope.todo.completed)return;element.addClass(dragHoverClass),element.removeClass(moveUpClass),$rootScope.dropEleIdx=dropEleIdx}else dragEleIdx>dropEleIdx?(element.addClass(dragHoverClass),element.addClass(moveDownClass),$rootScope.dropEleIdx=dropEleIdx):console.log("drag = drop");$rootScope.lastMovement=!0}else{if(dropEleIdx>dragEleIdx){if(scope.todo.completed)return;element.addClass(dragHoverClass),element.addClass(moveUpClass),$rootScope.dropEleIdx=dropEleIdx}else dragEleIdx>dropEleIdx?(element.addClass(dragHoverClass),element.removeClass(moveDownClass),$rootScope.dropEleIdx=dropEleIdx):console.log("drag = drop");$rootScope.lastMovement=!1}}function onDrop(e){if(!scope.todo){e.preventDefault&&e.preventDefault(),e.stopPropagation&&e.stopPropagation();var data={dragEleIdx:dragEleIdx,dropEleIdx:$rootScope.dropEleIdx},fn=$parse(attr.uiOnDrop);scope.$apply(function(){fn(scope,{$data:data,$event:e})})}}var dragEleIdx,dropEleIdx,dropChannel="defaultchannel",dragChannel="",dragHoverClass="todo-hover",moveDownClass="todo-movedown",moveUpClass="todo-moveup";scope.todo&&scope.todo.completed?dropEleIdx=scope.remainingCount-1:scope.todo&&(dropEleIdx=scope.todos.indexOf(scope.todo)),$rootScope.$on("ANGULAR_DRAG_START",function(event,data){dragEleIdx=data.dragEleIdx,element.bind("dragover",onDragOver),element.bind("dragenter",onDragEnter),element.bind("drop",onDrop)}),$rootScope.$on("ANGULAR_DRAG_END",function(e,channel){dragChannel="",dropChannel===channel&&(element.unbind("dragover",onDragOver),element.unbind("dragenter",onDragEnter),element.unbind("drop",onDrop),element.removeClass(dragHoverClass),element.removeClass(moveUpClass),element.removeClass(moveDownClass))}),attr.$observe("dropChannel",function(value){value&&(dropChannel=value)})}}]),angular.module("core").directive("todoEscape",function(){var ESCAPE_KEY=27;return function(scope,elem,attrs){elem.bind("keydown",function(event){event.keyCode===ESCAPE_KEY&&scope.$apply(attrs.todoEscape)})}}),angular.module("core").directive("todoFocus",["$timeout",function($timeout){return function(scope,elem,attrs){scope.$watch(attrs.todoFocus,function(newVal){newVal&&$timeout(function(){elem[0].focus()},0,!1)})}}]),angular.module("core").service("Menus",[function(){this.defaultRoles=["*"],this.menus={};var shouldRender=function(user){if(!user)return this.isPublic;if(~this.roles.indexOf("*"))return!0;for(var userRoleIndex in user.roles)for(var roleIndex in this.roles)if(this.roles[roleIndex]===user.roles[userRoleIndex])return!0;return!1};this.validateMenuExistance=function(menuId){if(menuId&&menuId.length){if(this.menus[menuId])return!0;throw new Error("Menu does not exists")}throw new Error("MenuId was not provided")},this.getMenu=function(menuId){return this.validateMenuExistance(menuId),this.menus[menuId]},this.addMenu=function(menuId,isPublic,roles){return this.menus[menuId]={isPublic:isPublic||!1,roles:roles||this.defaultRoles,items:[],shouldRender:shouldRender},this.menus[menuId]},this.removeMenu=function(menuId){this.validateMenuExistance(menuId),delete this.menus[menuId]},this.addMenuItem=function(menuId,menuItemTitle,menuItemURL,menuItemType,menuItemUIRoute,isPublic,roles,position){return this.validateMenuExistance(menuId),this.menus[menuId].items.push({title:menuItemTitle,link:menuItemURL,menuItemType:menuItemType||"item",menuItemClass:menuItemType,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].roles:roles,position:position||0,items:[],shouldRender:shouldRender}),this.menus[menuId]},this.addSubMenuItem=function(menuId,rootMenuItemURL,menuItemTitle,menuItemURL,menuItemUIRoute,isPublic,roles,position){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===rootMenuItemURL&&this.menus[menuId].items[itemIndex].items.push({title:menuItemTitle,link:menuItemURL,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].items[itemIndex].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].items[itemIndex].roles:roles,position:position||0,shouldRender:shouldRender});return this.menus[menuId]},this.removeMenuItem=function(menuId,menuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===menuItemURL&&this.menus[menuId].items.splice(itemIndex,1);return this.menus[menuId]},this.removeSubMenuItem=function(menuId,submenuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)for(var subitemIndex in this.menus[menuId].items[itemIndex].items)this.menus[menuId].items[itemIndex].items[subitemIndex].link===submenuItemURL&&this.menus[menuId].items[itemIndex].items.splice(subitemIndex,1);return this.menus[menuId]},this.addMenu("topbar")}]),angular.module("core").factory("TodoStorage",[function(){var STORAGE_ID="todoGenius";return{get:function(){return JSON.parse(localStorage.getItem(STORAGE_ID)||"[]")},put:function(todos){localStorage.setItem(STORAGE_ID,JSON.stringify(todos))}}}]),angular.module("users").config(["$httpProvider",function($httpProvider){$httpProvider.interceptors.push(["$q","$location","Authentication",function($q,$location,Authentication){return{responseError:function(rejection){switch(rejection.status){case 401:Authentication.user=null,$location.path("signin");break;case 403:}return $q.reject(rejection)}}}])}]),angular.module("users").config(["$stateProvider",function($stateProvider){$stateProvider.state("profile",{url:"/settings/profile",templateUrl:"modules/users/views/settings/edit-profile.client.view.html"}).state("password",{url:"/settings/password",templateUrl:"modules/users/views/settings/change-password.client.view.html"}).state("accounts",{url:"/settings/accounts",templateUrl:"modules/users/views/settings/social-accounts.client.view.html"}).state("signup",{url:"/signup",templateUrl:"modules/users/views/authentication/signup.client.view.html"}).state("signin",{url:"/signin",templateUrl:"modules/users/views/authentication/signin.client.view.html"}).state("forgot",{url:"/password/forgot",templateUrl:"modules/users/views/password/forgot-password.client.view.html"}).state("reset-invlaid",{url:"/password/reset/invalid",templateUrl:"modules/users/views/password/reset-password-invalid.client.view.html"}).state("reset-success",{url:"/password/reset/success",templateUrl:"modules/users/views/password/reset-password-success.client.view.html"}).state("reset",{url:"/password/reset/:token",templateUrl:"modules/users/views/password/reset-password.client.view.html"})}]),angular.module("users").controller("AuthenticationController",["$scope","$http","$location","Authentication",function($scope,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.signup=function(){$http.post("/auth/signup",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){$scope.error=response.message})},$scope.signin=function(){$http.post("/auth/signin",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("PasswordController",["$scope","$stateParams","$http","$location","Authentication",function($scope,$stateParams,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.askForPasswordReset=function(){$scope.success=$scope.error=null,$http.post("/auth/forgot",$scope.credentials).success(function(response){$scope.credentials=null,$scope.success=response.message}).error(function(response){$scope.credentials=null,$scope.error=response.message})},$scope.resetUserPassword=function(){$scope.success=$scope.error=null,$http.post("/auth/reset/"+$stateParams.token,$scope.passwordDetails).success(function(response){$scope.passwordDetails=null,Authentication.user=response,$location.path("/password/reset/success")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("SettingsController",["$scope","$http","$location","Users","Authentication",function($scope,$http,$location,Users,Authentication){$scope.user=Authentication.user,$scope.user||$location.path("/"),$scope.hasConnectedAdditionalSocialAccounts=function(){for(var i in $scope.user.additionalProvidersData)return!0;return!1},$scope.isConnectedSocialAccount=function(provider){return $scope.user.provider===provider||$scope.user.additionalProvidersData&&$scope.user.additionalProvidersData[provider]},$scope.removeUserSocialAccount=function(provider){$scope.success=$scope.error=null,$http.delete("/users/accounts",{params:{provider:provider}}).success(function(response){$scope.success=!0,$scope.user=Authentication.user=response}).error(function(response){$scope.error=response.message})},$scope.updateUserProfile=function(isValid){if(isValid){$scope.success=$scope.error=null;var user=new Users($scope.user);user.$update(function(response){$scope.success=!0,Authentication.user=response},function(response){$scope.error=response.data.message})}else $scope.submitted=!0},$scope.changeUserPassword=function(){$scope.success=$scope.error=null,$http.post("/users/password",$scope.passwordDetails).success(function(){$scope.success=!0,$scope.passwordDetails=null}).error(function(response){$scope.error=response.message})}}]),angular.module("users").factory("Authentication",[function(){var _this=this;return _this._data={user:window.user},_this._data}]),angular.module("users").factory("Users",["$resource",function($resource){return $resource("users",{},{update:{method:"PUT"}})}]);